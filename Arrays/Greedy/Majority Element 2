It is a greedy approach similar to that of the majority element 1

use of the ele 1,ele2,count1,count2

initially zero the count and doing the project last two element will be found then check the element present more than n/3 time in the array

class Solution {
    public List<Integer> majorityElement(int[] nums) 
    {
        int count1=0;
        int count2=0;
        int element1=Integer.MIN_VALUE;
        int element2=Integer.MIN_VALUE;
        int n=nums.length;
        List<Integer>l=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            if(count1==0&&nums[i]!=element2)
            {
                count1++;
                element1=nums[i];
            }
            else if(count2==0&&nums[i]!=element1)
            {
                count2++;
                element2=nums[i];
            }
            else if(nums[i]==element1)
            count1++;
            else if(nums[i]==element2)
            count2++;
            else
            {
                count1--;
                count2--;
            }
        }
        count1=0;
        count2=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==element1)
            count1++;
            else if(nums[i]==element2)
            count2++;
        }
        int k=(n/3)+1;
        if(count1>=k)
        l.add(element1);
        if(count2>=k)
        l.add(element2);

        return l;
    }
}

Time Complexity:O(N)
Space Complexity:O(1)