Problem statement
You are given a string 'S' of length 'N' consisting of lowercase English alphabet letters. You are also given a positive integer 'K'.

Now, a substring of this string is good if it contains at most 'K' distinct characters. A string 'X' is a substring of string 'Y' if it can be obtained by deletion of several continuous elements(possibly zero) from the beginning and the end from the string 'Y'.

Your task is to return the maximum size of any good substring of the string 'S'.

Example:
‘S’ = “bacda” and ‘K’ = 3.

So, the substrings having at most ‘3’ distinct characters are called good substrings. Some possible good substrings are:
1. “bac”
2. “acd”
3. “acda”

The substring “acda” is the largest possible good substring, as we cannot get any other substring of length 5 or more having distinct characters less than or equal to ‘3’. Thus, you should return ‘4’ as the answer.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= K <= 26
1 <= N <= 10^4

Time Complexity:O(N)
Space Complexity:0(k)


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLengthofLongestSubstring(String s, int k) {

      HashMap<Character,Integer>hash=new HashMap<>();
	  int going=0;
	  int max=0;

	  for(int i=0;i<s.length();i++)
	  {
		  char sub=s.charAt(i);
		  hash.put(sub,hash.getOrDefault(sub,0)+1);
		  while(hash.size()>k)//If the distinct character exceeds k
		  {
			  char ne=s.charAt(going);
			  hash.put(ne,hash.get(ne)-1);//remove one by one instead whole remove .To verify the occurance of the particular character

			  if(hash.get(ne)==0)//remove the character from the hashmap if its frequency is zero
			  hash.remove(ne);

			  going++;

		  }
		  max=Math.max(max,i-going+1);//calculating the max value after the removal of the extra distinct character.Adding 1 because the index value starts from zero.

	  }		
	  return max;
	}
}
