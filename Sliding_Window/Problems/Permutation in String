Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1s permutations is the substring of s2.

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Time Complexity:O(N1)+O(N2)
Space complexity:O(N1)//maximum of the size of the hashmap will be N1


class Solution {
    public boolean checkInclusion(String s1, String s2) 
    {
       HashMap<Character,Integer>perm=new HashMap<>();//to the check for the permutations of the other string
       HashMap<Character,Integer>exist=new HashMap<>(); //to note down the corresponding windows values concurrently
       int n1=s1.length();
       int n2=s2.length();
      int i=0;
       for(i=0;i<n1;i++)
       {
        char c=s1.charAt(i);
          perm.put(c,perm.getOrDefault(c,0)+1);//calaculating the frequency of the respective characters
       }
       int going=0;
       i=0;
       while(i<s2.length())
       {
        char c=s2.charAt(i);
          if(!perm.containsKey(c))//check for the element present in the other string while traversing if not found change the starting and the ending to the next itration
          {
            i=i+1;
            going=i;
            exist.clear();
            continue;//continue used to move to next iteration without working on the remaining part of the loop
          }
          exist.put(c,exist.getOrDefault(c,0)+1);//adds the corresponding element to the in map if exists;
          while(exist.get(c)>perm.get(c))//checks if the characetr limit is exceeded the perms character limit
          {
            char k=s2.charAt(going);
            exist.put(k,exist.get(k)-1);//lower downing the loop as the chacater reats
            going++;
          }
         int size=i-going+1; //represents the size of the window
          if(size==s1.length())
          return true;
          i++;

       }
       return false;
    }
}


