Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

 Time Complexity:O(N)
 Space Complexity:O(N)
 
class Solution {
    public int minSubArrayLen(int target, int[] nums) 
    {
      double minsum=Integer.MAX_VALUE;
      int going=0;
      int sum=0;
     
      int result=Integer.MAX_VALUE;
      for(int i=0;i<nums.length;i++)
      {
        sum+=nums[i];
        
        while(sum>=target)//used when elements removed but still there is an target sum is inside
        {
            result=Math.min(i-going+1,result);//used to find the lowest possiblr outcome for the solution
            sum-=nums[going++];
         }
      } 
      
      return result==Integer.MAX_VALUE?0:result;//works when ondition none reache the target sum   
    }
}