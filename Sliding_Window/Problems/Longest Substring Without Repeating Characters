Problem

Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Time Complexity:O(N)
Space Complexity:O(N)

class Solution 
{
    public int lengthOfLongestSubstring(String s) 
    {
        HashMap<Character,Integer>hash=new HashMap<>();
        int going=0;
        int max=0;
        for(int i=0;i<s.length();i++)
        {
            char c=s.charAt(i);
            hash.put(c,hash.getOrDefault(c,0)+1);

            while(hash.get(c)>1)//if the hashmap repeated values comes remove the repeated values
            {
                char k=s.charAt(going);
                hash.put(k,hash.get(k)-1);
                going++;
            }
             max=Math.max(max,i-going+1);
        }
        return max;
    }
}